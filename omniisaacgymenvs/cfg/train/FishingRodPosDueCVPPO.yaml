params:
  seed: ${...seed}

  algo:
    name: a2c_continuous # ppo_continuous

  model:
    name: continuous_a2c_logstd

  network:
    name: actor_critic
    separate: False
    space:
      continuous:
        mu_activation: None
        sigma_activation: None
        mu_init:
          name: default
        sigma_init:
          name: const_initializer
          val: 0
        fixed_sigma: True

    mlp:
      units: [512, 256, 128]  
      activation: elu
      d2rl: False
      
      initializer:
        name: default
      regularizer:
        name: None

  load_checkpoint: ${if:${...checkpoint},True,False} # flag which sets whether to load the checkpoint
  load_path: ${...checkpoint} # path to the checkpoint to load

  config:
    name: ${resolve_default:FishingRodPosDueCV,${....experiment}}
    full_experiment_name: ${.name}
    device: ${....rl_device}
    device_name: ${....rl_device}
    env_name: rlgpu
    ppo: True
    mixed_precision: False
    normalize_input: True
    normalize_advantage: True
    normalize_value: True
    
    num_actors: ${....task.env.numEnvs}
    reward_shaper:
      scale_value: 0.1
    
    value_bootstrap: True
    gamma: 0.99
    tau: 0.95
    learning_rate: 1.e-4
    lr_schedule: adaptive
    kl_threshold: 0.008
    score_to_win: 2000000000000000
    max_epochs: ${resolve_default:100000,${....max_iterations}}
    save_best_after: 50
    save_frequency: 50
    grad_norm: 1.0
    entropy_coef: 0.001 
    # entropy_coef: 0.0 
    truncate_grads: True
    e_clip: 0.2
    
    ## same of the episode end or a multiple, i.e., episodeLength / dt
  
    # horizon_length: 750  ## to test the dynamics
    # minibatch_size: 750  ## to test the dynamics

    horizon_length: 100     # -->  (dt 0.005) # 
    minibatch_size: 12800   # -->  (dt 0.005) #

    mini_epochs: 5 #
    critic_coef: 2 #

    clip_value: True 
    seq_len: 4
    bounds_loss_coef: 0.001 
    print_stats: True

    # num_envs * horizon_length/mini_batch_size has to be int or does not work